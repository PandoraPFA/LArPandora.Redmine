BEGIN_PROLOG

pandora_event_dump:
{
    module_type: "LArPandoraEventDump"
}

dump_all:                    @local::pandora_event_dump
dump_all.PandoraLabel:       "pandora"
dump_all.TrackLabel:         "pandoraTrack"
dump_all.ShowerLabel:        "pandoraShower"

dump_cosmic:                 @local::pandora_event_dump
dump_cosmic.PandoraLabel:    "pandoraFullCosmic"

dump_nu:                     @local::pandora_event_dump
dump_nu.PandoraLabel:        "pandoraFullNu"

END_PROLOG



## 
##  Shared art job configuartions for MCC8 uboone reco
##
#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "nah.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
}

process_name: LArPandoraSplittingTest

#source is a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 analyzers:
 {
    # Dump information on all of the reconstructed particles from the single pandora pass
    dumpAll:          @local::dump_all

    # Dump information on the split collections
    dumpCosmic:       @local::dump_cosmic
    dumpNu:           @local::dump_nu
 }

 #reco sequence and trigger_paths to be defined elsewhere

 stream1:   [ dumpAll, dumpCosmic, dumpNu  ]
 end_paths: [ stream1 ]  

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   dataTier: "reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}
